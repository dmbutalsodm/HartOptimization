<div id="loadingdim"></div>
<div class="contentholder">
    <div id="loadingcircle"></div>
    <div id="mainmodal" class="modal">
        <div class="modal-background" onclick="document.querySelector('#mainmodal').classList.remove('is-active')"></div>
        <div class="modal-content box jobinfomodal">
                <p class="title is-4" id="modal-title"></p>
                <p class="title is-6">Part:</p>
                <p style="margin-bottom:50px;" class="subtitle is-6"><a id="modal-part"></a></p>
                <p class="title is-6">Part count:</p>
                <p style="margin-bottom:50px;" class="subtitle is-6" id="modal-partcount"></p>
                <p class="title is-6">Start date:</p>
                <p style="margin-bottom:50px;" class="subtitle is-6" id="modal-startdate"></p>
                <p class="title is-6">Tools required:</p>
                <div style="margin-top: -20px;" id="toolbox"></div>
        </div>
        <button class="modal-close is-large" onclick="document.querySelector('#mainmodal').classList.remove('is-active')" />
    </div>
    <div id="headerholder">
        <img src="/images/scheduling.png" style="width:50%; max-width: 180px; margin-bottom: 5px;" />
        <p class="title is-4">This is a potential schedule, organised by machine.</p>
        <p style="margin-top:-15px">The balance represents the parts remaining to be produced at the <strong>beginning</strong> of the day.</p>
        <p>Jobs displayed in <span style="color:#3298dc">blue</span> mean that the selected machine has necessary tools.</p>
        <p style="margin-bottom: 20px;">Jobs displayed in <span style="color:#ee5655">red</span> mean that the selected machine does <strong>NOT</strong> have the necessary tools.</p>
    </div>
    <div id='tablesholder'>
        {{#each this.machines}}
            <a class="machinename" style="position: relative; width: 100%; text-align: left; font-weight: 700" href="machines/{{id}}/tools">{{attributes.name}}</a>
            <table>
                <tr id="{{id}}-date"><td>Date</td></tr>
                <tr id="{{id}}-job"><td>Job</td></tr>
                <tr id="{{id}}-balance"><td>Balance</td></tr>
                <tr id="{{id}}-producing"><td>Production</td></tr>
            </table>
        {{/each}}
    </div>
</div>


<style>
    #loadingdim {
        transition-property: background-color;
        transition-duration: 1s;
        pointer-events: none;
        position: fixed;
        background-color: rgb(10, 10, 10, .86);
        width: 100vw;
        height: 1000vh;
        margin-top: -100px;
    }

    #loadingcircle {
        transition-property: opacity;
        transition-duration: .55s;
        pointer-events: none;
        animation: spinAround .35s infinite linear;
        position: fixed;
        top: 40%;
        left: 50%;
        border: 5px solid #888888;
        border-radius: 290486px;
        border-right-color: transparent;
        border-top-color: transparent;
        content: "";
        display: block;
        height: 100px;
        width: 100px;
    }

    .jobinfomodal {
        display: flex;
        height: 95%;
        max-height: 600px;
        width: 90%;
        max-width: 800px;
        flex-direction: column;
        padding-left: 40px;
        padding-top: 50px;
        overflow-y: scroll;
    }

    .modbutton {
        color: white;
        filter: brightness(100%);
    }

    .modbutton:hover {
        filter: brightness(96%);
    }

    .modbutton:active {
        filter: brightness(90%);
    }

    .modbutton.istooled {
        background-color: #3298dc;
    }

    .modbutton.isnottooled {
        background-color: #ee5655;
    }

    td {
        padding: 3px;
        min-width: 50px;
        border: 1px solid black;
        text-align: center;
        vertical-align: middle;
    }

    table {
        border: 1px solid black;
        margin-bottom: 30px;
    }

    #headerholder {
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .contentholder {
        display: block;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        overflow-x: hidden;
        margin-bottom: 100px;
        width: 100%;
    }

    #tablesholder {
        padding: 20px;
        display: block;
        margin-left: 100px;
        margin-right: 100px;
        border-radius: 10px 10px 0px 0px;
        
        box-shadow: rgba(0,0,0,0.8) 0 0 10px;
        overflow-x: scroll;
    }

    #tablesholder::-webkit-scrollbar {
        background-color: #AAAAAA;
        position: sticky;
    }

    #tablesholder::-webkit-scrollbar-thumb {
        background-color: #3298dc;
    }
</style>

<script>
    function dateToFromNowDateString(dateString) {
            const dateObj = new Date(new Date(dateString).getTime() + 18000000);
            if (dateObj.getTime() > Date.now()) return `Starts ${dateObj.toLocaleString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })} - ${Math.ceil((dateObj.getTime() - Date.now()) / 1000 / 60 / 60 / 24)} days from today.`
            return `Started ${dateObj.toLocaleString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })} - ${-1 * Math.ceil((dateObj.getTime() - Date.now()) / 1000 / 60 / 60 / 24)} days ago.`
    }

    Promise.all(
            [
                axios.get('http://{{WEBSITE_IP}}:3000/api/scheduling'),
                axios.get('http://{{WEBSITE_IP}}:3000/api/machines'),
                axios.get('http://{{WEBSITE_IP}}:3000/api/tools'),
                axios.get('http://{{WEBSITE_IP}}:3000/api/jobs'),
                axios.get('http://{{WEBSITE_IP}}:3000/api/parts')
            ]
        ).then(results => {
            let     [schedule, machines, tools, jobs, parts] = results;
            schedule = Object.freeze(schedule.data);
            machines = Object.freeze(machines.data);
            tools    = Object.freeze(tools.data);
            jobs     = Object.freeze(jobs.data);
            parts    = Object.freeze(parts.data);
            
            const th = document.querySelector('#tablesholder')
            th.onscroll = () => {
                document.querySelectorAll(".machinename").forEach(e => {
                    e.style.left = `${th.scrollLeft}px`;
                })
            }

            console.log("all reqs ok!")

            let jobElements = {};
            
            for (let machine of Object.keys(schedule)) {
                let today = new Date();
                let currJob = null;
                let currJobId = "";
                let colSpan = 1;
                for (let i = 0; i < schedule[machine].length; i++) {
                    document.querySelector(`#${machine}-date`).insertAdjacentHTML("beforeend", `<td>${today.getMonth() + 1}/${today.getUTCDate()}</td>`);
                    if (schedule[machine][i]) {
                        if (!currJob || currJobId != schedule[machine][i][0]) {
                            currJob = document.createElement("td");
                            currJobId = schedule[machine][i][0];
                            let currJobIdLocal = currJobId;
                            jobElements[currJobIdLocal] = {element: currJob, machine: machine, part: (jobs.find(j => j.id == currJobId)).partId};
                            let currJobObject = jobs.find(j => j.id == schedule[machine][i][0]);
                            currJob.innerText = currJobObject.name + " (Click to view details)" + " - " + dateToFromNowDateString(currJobObject.startDate)
                            currJob.classList.add("modbutton")
                            currJob.setAttribute('colspan', 1);
                            colSpan = 1;

                            // modal setup
                            currJob.onclick = () => {
                                document.querySelector('#mainmodal').classList.add("is-active");
                                let buttonJob  =  jobs.find(j => j.id == currJobIdLocal);
                                let buttonPart = parts.find(p => p.partId == jobElements[currJobIdLocal].part);
                                document.querySelector('#modal-title').innerText = "Job - " + buttonJob.name
                                document.querySelector('#modal-part').innerText = buttonPart.partName;
                                document.querySelector('#modal-part').setAttribute("href", "http://{{WEBSITE_IP}}/parts/" + buttonPart.partId)
                                document.querySelector('#modal-partcount').innerText = buttonJob.partCount;
                                document.querySelector('#modal-startdate').innerText = buttonJob.startDate;
                                let toolbox = document.querySelector('#toolbox');
                                toolbox.innerHTML = '';
                                buttonPart.tools.forEach(pt => {
                                    let e = document.createElement("p");
                                    e.innerText = tools.find(t => t.id == pt).attributes.name;
                                    toolbox.appendChild(e);
                                })
                            }

                            document.querySelector(`#${machine}-job`).appendChild(currJob)
                        } 
                        else {
                            colSpan += 1;
                            currJob.setAttribute('colspan', colSpan);
                        }
                    }
                    else {
                        currJob = null;
                        document.querySelector(`#${machine}-job`).insertAdjacentHTML("beforeend", `<td></td>`);
                    }

                    document.querySelector(`#${machine}-balance`).insertAdjacentHTML("beforeend", `<td>${schedule[machine][i] ?  schedule[machine][i][1] : ""}</td>`);
                    document.querySelector(`#${machine}-producing`).insertAdjacentHTML("beforeend", `<td>${schedule[machine][i] ?  schedule[machine][i][2] : ""}</td>`);
                    today = new Date(today.getTime() + 86400000);
                }
            }
            for (let key of Object.keys(jobElements)) {
                let jobPart = parts.find(p => p.partId == jobElements[key].part);

                let possible = true;
                jobPart.tools.forEach(tId => { 
                    if (tools.find(t => t.id == tId).machine !== jobElements[key].machine) possible = false; // Optimise with once-thru on tool array
                });
                jobElements[key].element.classList.add(possible ? "istooled" : "isnottooled");
            }
            document.querySelector("#loadingcircle").style.opacity = "0";
            document.querySelector('#loadingdim').style.backgroundColor = "rgba(10,10,10,0)"
        })
</script>